# -*- coding: utf-8 -*-
"""Hidden_genetical_patterns_SARS_virus_K-Means_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197fED-Wk671SABWLyX9UnzCGLzN4HKVy

This project focused on differential gene expression analysis. We will utilize an unsupervised learning approach, using K-Means clustering to find the hidden patterns inside the datasets and form clusters based on genes co-expression under condition of SARS infection.

The dataset includes readings of fluorescence tags emissions from the microarray gene expression analysis method. ID_REF column refers to the sample slot ids, and the corresponding columns represent reading intensities from control and infected sets.

# First, let's install some of the required libraries.
"""

pip install pandas

pip install -U scikit-learn

"""# Importing libraries"""

import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
pd.set_option('max_seq_item', None)
pd.set_option('display.width', 1000)

"""# Importing the file:"""

!wget https://raw.githubusercontent.com/dmy-collab/shared-projects/main/Hidden_genetical_patterns_SARS_virus/SARS_expression.csv
dataset = pd.read_csv('SARS_expression.csv')

"""# Initial analysis:"""

print(dataset.shape)
print(dataset.head())
print(dataset.describe())
nulls = dataset.isnull().sum().to_frame()   # searching for missing values
for index, row in nulls.iterrows():
    print(index, row[0])

"""

# Separating values for infected samples:

"""

new_data = dataset.iloc[:, 5:]
print(new_data.head())

"""# Determining the optimal value of K using the "elbow" method:"""

wcss = []   # within cluster sum of squares (measures the variability of the observations within each cluster)
for i in range(1, 20):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=150)
    kmeans.fit(new_data)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 20), wcss, color='k')
plt.title("The Elbow Method (SARS infected)")
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()      
print(f'\n cluster labels: {kmeans.labels_}')

"""*From the graph, we can infer that 18 - is the optimal number of clusters (adding more clusters wouldn't provide much better modeling of the data). Let's assign this cluster number to the to the GenBank  accession IDs:*

# Let's assign the cluster number retrieved from the step above to the ID_REF:
"""

cluster_genes =\
    pd.concat([dataset.iloc[:, 0], pd.DataFrame(kmeans.labels_)], axis=1)
cluster_genes.columns = ['ID_REF', 'Groups']
print(cluster_genes.head())

"""# Grouping genes into respective clusters:"""

cluster = cluster_genes.groupby('Groups')
print(cluster.describe())

"""*Cluster 0 has the highest N of genes - 2739. Let's retrieve this cluster:*"""

cluster = {k: v for k, v in cluster_genes.groupby('Groups')}
print('\nCluster with the highest number of genes:\n')
print(cluster[0])

"""This information provides a solid starting point for further research supported with literature and the pathway analysis of these genes, along with the gene enrichment analysis."""